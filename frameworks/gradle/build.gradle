plugins {
  id 'java'
  id 'groovy'
  id 'scala'
  id 'org.jetbrains.kotlin.jvm' version '1.1.3-2'
}

repositories {
  jcenter()
}

dependencies {
  // for dependencies in org.jetbrains.kotlin, versions are automatically set to the plugin's version
  compile     "org.jetbrains.kotlin:kotlin-stdlib"
  testCompile "org.jetbrains.kotlin:kotlin-test"
  testCompile "org.jetbrains.kotlin:kotlin-test-junit"
  testCompile "org.amshove.kluent:kluent:1.26"
  testCompile "com.winterbe:expekt:0.5.0"
  testCompile "io.kotlintest:kotlintest:2.0.5"
  // TODO Hamkrest support
  // compile     "org.jetbrains.kotlin:kotlin-reflect"
  // testCompile "com.natpryce:hamkrest:1.4.1.0"

  compile     "org.codehaus.groovy:groovy-all:2.4.12"
  testCompile "org.spockframework:spock-core:1.1-groovy-2.4"

  compile "org.scala-lang:scala-library:2.12.3"
  testCompile "org.scalatest:scalatest_2.12:3.0.3"

  testCompile "junit:junit:4.12"
}

compileKotlin {
  kotlinOptions {
  }
}

test {
  systemProperty 'java.awt.headless', true

  reports {
    html.enabled = false
    junitXml.enabled = false
  }

  beforeSuite { desc ->
    if (!desc.name.startsWith("Gradle Test ")) {
      println("\n<DESCRIBE::>${desc.name}")
    }
  }
  afterSuite { desc, result ->
    if (!desc.name.startsWith("Gradle Test ")) {
      println("\n<COMPLETEDIN::>${result.endTime - result.startTime}")
    }
  }
  beforeTest { desc ->
    println("\n<IT::>${desc.name}")
  }
  afterTest { desc, result ->
    if (result.resultType == TestResult.ResultType.SUCCESS) {
      println("\n<PASSED::>Test Passed")
    } else if (result.resultType == TestResult.ResultType.FAILURE) {
      def ex = result.exception
      // org.gradle.internal.serialize.PlaceholderException is used when the exception is not serializable.
      // for example org.scalatest.exceptions.TestFailedException from ScalaTest
      if (ex in AssertionError || ex in org.gradle.internal.serialize.PlaceholderException) {
        println("\n" + "<FAILED::>Test Failed\n${ex.message}".replaceAll("\n", "<:LF:>"))
      } else {
        println("\n" + "<ERROR::>Test Errored\n${ex.message}".replaceAll("\n", "<:LF:>"))
        println("\n" + "<LOG::Stack Trace>${ex.stackTrace.join("\n").replaceAll("\n", "<:LF:>")}")
      }
    } else if (result.resultType == TestResult.ResultType.SKIPPED) {
      println("\n<LOG::>Test Skipped")
    }
    println("\n<COMPLETEDIN::>${result.endTime - result.startTime}")
  }

  onOutput { desc, event ->
    if (event.destination == TestOutputEvent.Destination.StdOut) {
      print(event.message)
    } else if (event.destination == TestOutputEvent.Destination.StdErr) {
      System.err.print(event.message)
    }
  }
}

task run(type: JavaExec, dependsOn: classes) {
  // use gradle -D?
  main = System.getenv("MAIN_CLASS_NAME")
  classpath sourceSets.main.runtimeClasspath
  classpath configurations.runtime
}

